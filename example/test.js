// Название класса
const nameClass = "anyks";
/* Изменяем прототипы основных типов данных НАЧАЛО */
/**
 * method Устанавливаем автоматическое присвоение методов
 * @param  {String}   name название функции
 * @param  {Function} func функция обратного вызова
 * @return {Object}        объект прототипа
 */
Function.prototype.method = function(name, func){
	// Изменяем название метода
	name = nameClass + "_" + name;
	// Если метод не существует тогда создаем его
	if(!this.prototype[name]){
		this.prototype[name] = func;
		return this;
	}
};

String.method("trim", function(){
	return this
	.replace(/^\s+|\s+$/g, "")
	.replace(/[\u200B\s]{1,}/ig, " ");
});

/**
 * String.ucwords Создаем метод перевода первого символа в верхний регистр а остальных символов в нижний регистр
 */
String.method("ucwords", function(){
	// Возвращаем текущую строку
	return this.charAt(0).toUpperCase() + this.substr(1).toLowerCase();
});

const isset = data => {
	try {
		// Карта для поиска значений
		const map = [
			-1,
			undefined,
			null,
			"",
			"-1",
			"0",
			"false",
			"none",
			"null",
			"undefined",
			"not result"
		];
		// Переходим по всей карте проверок
		for(let val of map){
			// Если найден один из элементов в списке тогда сообщаем что тест проверку не прошёл
			if(!data || (val === ((typeof(data) === "string")
			? data.toString().toLowerCase() : data))) return false;
		}
		// Сообщаем что тест проверку прошёл
		return true;
	} catch(e) {return false;}
};

const parseNativeAddress = address => {
	// [Страна, Регион, Район, Город, Улица, Дом, Квартира]
	//
	// ИЛИ
	//
	// [Индекс, Страна, Регион, Район, Город, Улица, Дом, Квартира]
	// Исправляем адрес
	address = address.toLowerCase().replace(/([\.|\,])/ig, "$1 ").anyks_trim();
	// Проверяем есть ли запятые
	if(!/\,/ig.test(address)) address += ",";
	// Удаляем не существующие элементы массива
	address = address.split(",").filter(val => isset(val));
	// Регулярное выражение для интерпретации данных
	const reg = [
		// Почтовый индекс
		{type: "zip", reg: /\d{6}/i},
		// Регионы
		{type: "region", reg: new RegExp("(?:\\s|\\.|\\,|^)(авт(?:ономный|\\.)\\s+окр?(?:уг|-г)?|область|край|республика|город)|"
		+ "(?:\\s|\\.|\\,|^)(респ?|ао(?:кр?)?|обл|кр|г)(?:\\s|\\.|\\,|$)", "i")},
		// Районы
		{type: "district", reg: new RegExp("(?:\\s|\\.|\\,|^)(район|округ|улус|поселение)|(?:\\s|\\.|\\,|^)(р-н|окр|у|п)(?:\\s|\\.|\\,|$)", "i")},
		// Города
		{type: "city", reg: new RegExp("(?:\\s|\\.|\\,|^)((?:пос[её]л(?:ение|ок|ки)\\s+(?:городского\\s+типа|сельского\\s+типа|и\\(при\\)\\s+станция\\(и\\)|"
		+ "(?:при|и)\\s+станци(?:и|я)))|(?:(?:рабочий|курортный|дачный|городской)\\s+пос[её]лок)|(?:(?:поселковый|сельский|дачный\\s+поселковый)\\s+совет)|"
		+ "(?:пром(?:ышленная|\.)?\s*(?:\\s+|-)\s*зона)|(?:сельское\\s+(?:муницип(?:\\.|альное)?)?\\s*(?:образование|поселение))|(?:городской\\s+округ)|"
		+ "(?:насел[её]нный\\s+пункт)|(?:железнодорож(?:ный|ная)\\s+(?:пост|станция|разъезд|платформа|будка))|(?:почтовое\\s+отделение)|(?:жилой\\s+район)|"
		+ "(?:коллективное\\s+хозяйство)|(?:садовое\\s+неком(?:-|мерческо)е\\s+товарищество)|(?:советское\\s+хозяйство)|(?:выселки\\(ок\\))|"
		+ "ж\\/д\\s+останов\\.?\\s+\\(обгонный\\)\\s+пункт|ж\\/д\\s+(?:останов(?:\\.?|очный)|обгонный)\\s+пункт|(?:поселение|заимка|аал|кордон|"
		+ "пос[её]лок|территория|хозяйство|товарищество|зимовье|район|кишлак|поссовет|сельсовет|сомон|волость|село|местечко|аул|станица|остров|казарма|"
		+ "автодорога|квартал|починок|жилрайон|массив|деревня|слобода|станция|хутор|разъезд|колхоз|улус|погост|выселк(?:и|ок)|микрорайон|город(?:ок)?)|"
		+ "(?:п\\.г\\.т\\.|р\\.п\\.|к\\.п\\.|д\\.п\\.|н\\.п\\.|п\\.\\s+ст\\.|п\\.ст\\.|ж\\/д\\.\\s+ст\\.|ж\\/д\\s+ст\\.))|(?:\\s|\\.|\\,|^)(с\\/?с|п\\/(?:о|ст)|"
		+ "ж\\/д(?:ст|(?:\\_|\\.|-)?\s*(?:рзд|пост|оп|платф|будка))|с\\/(?:мо|п)|ст(?:-|\\.)\\s*ц?а|авто-а|кв-л|ма-в|р-?н|св?-т|за-ка|п(?:ромзона|ос-к|ст|гт|-к|к)|"
		+ "с(?:вх|мн|нт|вт|т|л|в)?|п(?:о?с)?|к(?:лх|п)?|т(?:ов|ер)|р(?:зд|п)|к(?:ор|аз)|г(?:о|п)|хз?|высел|пог|зим|мкр|нп|вл|дп|м|д|у|г)(?:\\s|\\.|\\,|$)", "i")},
		// Улицы
		{type: "street", reg: new RegExp("(?:\\s|\\.|\\,|^)(улица|площадь|переулок|гора|парк|тупик|канал|шоссе|проезд|набережная|километр|вал|бульвар|квартал|"
		+ "проспект|авеню|аллея|кольцо)|(?:\\s|\\.|\\,|^)(ул|пл|пр-?к?т?|ав|алл?|б-?р|вл|кнл|кв-л|к(?:м|л)|клц|на?б|пер|пр-зд|туп|ш|гор)(?:\\s|\\.|\\,|$)", "i")},
		// Микрорайоны
		{type: "community", reg: /(?:\\s|\\.|\\,|^)(микрорайон|жилой\s+комплекс)|(?:\s|\.|\,|^)(мкр|жкс?)(?:\s|\.|\,|$)/i},
		// Квартиры
		{type: "apartment", reg: /(?:\\s|\\.|\\,|^)(квартира|офис|комната)|(?:\s|\.|\,|^)(кв|ко?м|оф)(?:\s|\.|\,|$)/i},
		// Дома
		{type: "house", reg: /(?:\\s|\\.|\\,|^)(дом|строение|корпус)|(?:\s|\.|\,|^)(дм?|стр|ко?рп?|ст\-е)(?:\s|\.|\,|$)/i},
		// Дома
		{type: "house", reg: new RegExp("(?:(?:№\\s*)?\\d+[А-ЯЁ]*\\s*(?:\\/|-)\\s*\\d+[А-ЯЁ]*)|"
		+ "(?:(?:№\\s*)?(?:\\d+)[А-ЯЁ]*\\s*(?:к|с)?\\s*(?:\\d+)?\\s*(?:к|с)?\\s*(?:\\d+)?)$", "i")},
		// Реки
		{type: "river", reg: /(?:\\s|\\.|\\,|^)(река)|(?:^|\s)(р(?:-ка)?)(?:\s|\.|\,|$)/i},
		// Страны
		{type: "country", reg: /(?:\\s|\\.|\\,|^)(страна)|(?:\s|\.|\,|^)(стр?-?н?а?)(?:\s|\.|\,|$)/i}
	];
	// Карта объектов
	const mapSubjects = {
		"р":			"Река",
		"оф":			"Офис",
		"гор":			"Гора",
		"у":			"Улус",
		"кр":			"Край",
		"с":			"Село",
		"туп":			"Тупик",
		"ш":			"Шоссе",
		"смн":			"Сомон",
		"г":			"Город",
		"р-н":			"Район",
		"окр":			"Округ",
		"ав":			"Авеню",
		"ал":			"Аллея",
		"алл":			"Аллея",
		"кнл":			"Канал",
		"ул":			"Улица",
		"х":			"Хутор",
		"пог":			"Погост",
		"кор":			"Кордон",
		"за-ка":		"Заимка",
		"стр":			"Страна",
		"пр-зд":		"Проезд",
		"кл":			"Кольцо",
		"клц":			"Кольцо",
		"ма-в":			"Массив",
		"к":			"Кишлак",
		"д":			"Деревня",
		"пл":			"Площадь",
		"кв-л":			"Квартал",
		"б-р":			"Бульвар",
		"бр":			"Бульвар",
		"ком":			"Комната",
		"обл":			"Область",
		"п-к":			"Починок",
		"пос-к":		"Посёлок",
		"сл":			"Слобода",
		"ст":			"Станция",
		"ст-ца":		"Станица",
		"рзд":			"Разъезд",
		"каз":			"Казарма",
		"зим":			"Зимовье",
		"вл":			"Волость",
		"м":			"Местечко",
		"км":			"Километр",
		"кв":			"Квартира",
		"пер":			"Переулок",
		"пр":			"Проспект",
		"пр-т":			"Проспект",
		"пр-кт":		"Проспект",
		"пос":			"Поселение",
		"с/с":			"Сельсовет",
		"с-т":			"Сельсовет",
		"св-т":			"Сельсовет",
		"свт":			"Сельсовет",
		"св":			"Сельсовет",
		"хз":			"Хозяйство",
		"п":			"Поселение",
		"авто-а":		"Автодорога",
		"тер":			"Территория",
		"респ":			"Республика",
		"наб":			"Набережная",
		"нб":			"Набережная",
		"мкр":			"Микрорайон",
		"рес":			"Республика",
		"жилрайон":		"Жилой район",
		"высел":		"Выселки(ок)",
		"тов":			"Товарищество",
		"cc":			"Сельский совет",
		"жк":			"Жилой комплекс",
		"жкс":			"Жилой комплекс",
		"дп":			"Дачный посёлок",
		"р.п.":			"Рабочий посёлок",
		"рп":			"Рабочий посёлок",
		"го":			"Городской округ",
		"пс":			"Поселковый совет",
		"ао":			"Автономный округ",
		"аок":			"Автономный округ",
		"аокр":			"Автономный округ",
		"н.п.":			"Населённый пункт",
		"нп":			"Населённый пункт",
		"гп":			"Городской посёлок",
		"к.п.":			"Курортный посёлок",
		"кп":			"Курортный посёлок",
		"промзона":		"Промышленная зона",
		"с/п":			"Сельское поселение",
		"п/о":			"Почтовое отделение",
		"свх":			"Советское хозяйство",
		"п. ст.":		"Посёлок при станции",
		"п.ст.":		"Посёлок при станции",
		"пст":			"Посёлок при станции",
		"ж/д_пост":		"Железнодорожный пост",
		"ж/д_будка":	"Железнодорожная будка",
		"клх":			"Коллективное хозяйство",
		"д.п.":			"Дачный поселковый совет",
		"ж/д. ст.":		"Железнодорожная станция",
		"ж/д ст.":		"Железнодорожная станция",
		"ж/дст":		"Железнодорожная станция",
		"п.г.т.":		"Посёлок городского типа",
		"пгт":			"Посёлок городского типа",
		"ж/д_рзд":		"Железнодорожный разъезд",
		"п/ст":			"Посёлок и(при) станция(и)",
		"ж/д_платф": 	"Железнодорожная платформа",
		"с/мо":			"Сельское муницип.образование",
		"снт":			"Садовое неком-е товарищество",
		"ж/д_оп":		"ж/д останов. (обгонный) пункт"
	};
	/**
	 * getAddress Функция поиска субъектов адреса
	 * @return {Object} объект собранный из параметров субъектов адреса
	 */
	const getAddress = () => {
		// Объект с данными
		let result = false;
		// Переходим по всему массиву адресов
		address.forEach((subject, i) => {
			// Удаляем пробелы
			subject = subject.anyks_trim();
			// Переходим по всему объекту регулярных выражений
			for(let key of reg){
				// Получаем массив типов
				const types = subject.match(key.reg);
				// Если массив существует
				if(Array.isArray(types) && (types.length > 1)){
					// Создаем объект
					const data = {name: "", type: ""};
					// Если объект не создан то создаем его
					if(!isset(result)) result = {};

					if((key.type === "house") && !reg[8].reg.test(subject)) continue;

					// Переходим по массиву
					types.forEach((val, i) => {
						// Если это не нулевой элемент
						if(isset(i) && isset(val)){
							// Запоминаем тип адреса
							data.type = val;
							// Останавливаем поиск
							types.length = 0;
						}
					});
					// Извлекаем название
					data.name = subject.replace(data.type, "").replace(/[\.\,]/ig, "");
					// Переименовываем тип объекта
					data.type = (isset(mapSubjects[data.type]) ? mapSubjects[data.type] : data.type);
					// Исправляем название и тип
					data.name = data.name.anyks_trim().anyks_ucwords();
					data.type = data.type.anyks_trim().anyks_ucwords();

					if(key.type === "house") data.type = "Дом";

					if(/^\d/.test(data.name) && (key.type === "city")) continue;

					// Создаем объект
					if(!isset(result[key.type])
					|| (key.type === "city")){
						// Запоминаем найденный результат
						if(address.length > 1) result[key.type] = data;
						// Если это всего один элемент в списке то создаем ключ Subject
						else result.subject = data;
						// Проверяем следует ли выходить
						if(((key.type !== "region")
						&& (key.type !== "district"))
						&& isset(result.city)) break;
					}
				// Ищем оставшиеся элементы
				} else {
					// Создаем объект
					const data = {name: "", type: ""};
					// Определяем тип субъекта
					switch(key.type){
						// Если это почтовый индекс
						case "zip":
							// Проверяем является ли запись почтовым индексом
							let zip = subject.match(key.reg);
							// Если это массив то преобразуем его
							if(Array.isArray(zip) && zip.length){
								// Запоминаем название почтового индекса
								data.name = zip[0].anyks_trim().anyks_ucwords();
								// Запоминаем тип индекса
								data.type = "Почтовый индекс";
							}
						break;
						// Если это дом
						case "house":
							// Проверяем является ли запись номером жилища
							let house = subject.match(reg[8].reg);
							// Если это массив то преобразуем его
							if(Array.isArray(house) && house.length && !isset(result.subject) && !isset(result.apartment)){
								// Запоминаем название жилища
								data.name = house[0].anyks_trim().anyks_ucwords();
								// Запоминаем тип жилища
								data.type = "Дом";
							}
						break;
						// Если это страна
						case "country":
							// Если это первый элемент в массиве или второй но первым был найден почтовый индекс
							if((!isset(i) && !isset(result)) || ((i === 1)
							&& isset(result) && isset(result.zip))){
								// Проверяем является ли запись исключительно строкой
								let country = subject.match(/^[^\d]+$/i);
								// Если это массив то преобразуем его
								if(Array.isArray(country) && country.length){
									// Запоминаем название страны
									data.name = country[0].anyks_trim().anyks_ucwords();
									// Запоминаем тип страны
									data.type = "Страна";
								}
							}
						break;
					}
					// Если какие-то данные найдены, тогда запоминаем их
					if(isset(data.name) && (!isset(result)
					|| !isset(result[key.type]))){
						// Если результат не существует
						if(!isset(result)) result = {};
						// Запоминаем найденный результат
						if(address.length > 1) result[key.type] = data;
						// Если это всего один элемент в списке то создаем ключ Subject
						else result.subject = data;
						// Выходим
						break;
					}
				}
			}
		});
		// Выводим найденный результат
		return result;
	};
	return getAddress();
};


// console.log(parseNativeAddress("Россия, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("страна Россия, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("155900, Россия, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("155900, Россия страна, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("Шуйский район, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("страна Россия, Ивановская область, г.Шуя, площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("площадь Комсомольская, дом 12, кв. 101"));
// console.log(parseNativeAddress("дом 12, кв. 101"));
// console.log(parseNativeAddress("кв. 101"));
// console.log(parseNativeAddress("Россия, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, 10к2"));
// console.log(parseNativeAddress("Россия, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, 10к2, кв. 101"));
// console.log(parseNativeAddress("кв.101, площадь Комсомольская, Ивановская обл.,стр.Россия,г.Шуя, дом 12"));
// console.log(parseNativeAddress("Россия, Ивановская область, Шуйский район, г.Шуя, площадь Комсомольская, дом 10 корпус 2 строение 1"));
// console.log(parseNativeAddress("Российская Федерация, г.Москва, посёлок Коммунарка, ул.Липовый парк, 10К2"));
// console.log(parseNativeAddress("Россия, Москва город, Коммунарка поселок, Липовый улица парк, 10К2"));
// console.log(parseNativeAddress("Россия, Ивановская область, город Шуя, площадь Комсомольская, д.12, кв.101"));
// console.log(parseNativeAddress("Россия, Ханты-мансийский автономный округ - югра автономный округ"));
console.log(parseNativeAddress("Россия, Нижегородская область"));

